#!/bin/bash

# Copyright (C) 2025 Dyne.org Foundation
#
# Designed, written and maintained by Denis Roio <jaromil@dyne.org>
#
# This source code is free software; you can redistribute it and/or
# modify it under the terms of the GNU Public License as published by
# the Free Software Foundation; either version 3 of the License, or
# (at your option) any later version.
#
# This source code is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.	Please refer
# to the GNU Public License for more details.
#
# You should have received a copy of the GNU Public License along with
# this source code; if not, , see <https://www.gnu.org/licenses/>.

TMP="$BATS_TEST_TMPDIR"
T="$BATS_TEST_DIRNAME"
# root where slangroom starts searching for files
export FILES_DIR="$T"
export SRC="${T}/src"
mkdir -p "$SRC"
load bats/test_helper/bats_support/load
load bats/test_helper/bats_assert/load
load bats/test_helper/bats_file/load
function _out() {     printf "$*\n"; }
function _err() { >&2 printf "$*\n" | tee -a $TMP/err; }

slexe() {
  set +e
  local slang="${SRC}/${contract}"
  [ "$1" == "" ] || slang="$1"
  [ -r "${slang}.slang" ] || {
    _err "Error: script not found: $slang"
    exit 1;  }
  # EXECUTION (timed)
  >&3 echo " ðŸ”¥ `basename ${1}.slang`"
  local start_time_s=$(date +%s)
  local start_time_ns=$(date +%N)
  bash bin/slexfe -F $slang \
    | slangroom-exec \
        1>$TMP/out 2> >(tee $TMP/err | grep -v 'J64 ' >&2)
  local res=$?
  local end_time_s=$(date +%s)
  local end_time_ns=$(date +%N)
  export output=`cat $TMP/out`
  # analyze and print logs in case of error
  [ "$res" != 0 ] && {
    >&2 echo "TRACE:"
    awk '/J64 TRACE/ {print $3}' $TMP/err | \
      cut -d\" -f1 | base64 -d | jq .
    >&2 echo "HEAP:"
    awk '/J64 HEAP/ {print $3}' $TMP/err | \
      cut -d\" -f1 | base64 -d | jq .
    exit 1;  }
  [ "$output" == "" ] && {
    _err "Output is missing, no result from previous computation"
    exit 1;  }
  # Calculate execution timing:
  # avoid leading zero issues in shell by normalizing inputs
  start_time_s=$((10#$start_time_s))
  start_time_ns=$((10#$start_time_ns))
  end_time_s=$((10#$end_time_s))
  end_time_ns=$((10#$end_time_ns))
  # Convert and calculate elapsed time in milliseconds
  local start_time_ms=$((start_time_s * 1000 + start_time_ns / 1000000))
  local end_time_ms=$((end_time_s * 1000 + end_time_ns / 1000000))
  local execution_time_ms=$((end_time_ms - start_time_ms))
  # Write the output
  rm -f "${1}.out.json"
  echo "$output" | jq . > "${1}.out.json"
  >&3 echo " ðŸ’¾ `basename ${1}.out.json`"
  >&3 echo ""
  set -e # relax
  # Generate execution graph
  if [ -L $slang.data.json ]; then
    idata=`readlink $slang.data.json`
    local size=$(stat --format="%s" "$idata") # Get file size in bytes
    idata="`basename $idata|cut -d. -f1`\n\n$size bytes"
  else
    idata="null\n\n0 bytes"
  fi
  if [ -L $slang.keys.json ]; then
    ikeys=`readlink $slang.keys.json`
    local size=$(stat --format="%s" "$ikeys") # Get file size in bytes
    ikeys="`basename $ikeys|cut -d. -f1`\n\n$size bytes"
  else
    ikeys="null\n\n0 bytes"
  fi
  iout="`basename $slang`\n\n$(stat --format="%s" "$slang.out.json") bytes"
  cat <<EOF | dot -Tsvg -o ${1}.svg
digraph G {
    rankdir=LR;
    node [shape=box, style=rounded, fontname="Arial", fontsize=12, color=black, fillcolor=lightgray, margin=0.2];
    bgcolor=transparent;
    edge [arrowsize=0.8];
    Input1 [label="$idata"];
    Input2 [label="$ikeys"];
    Script [shape=ellipse, label="zencode_exec\n\ntime: $execution_time_ms ms"];
    Output [label="$iout"];
    Input1 -> Script;
    Input2 -> Script;
    Script -> Output;
    edge [color=black, arrowsize=0.7];
}
EOF
  execlog $slang
}

execlog() {
  # add entry to execution log
  local input_found=0
  local out="${SRC}/${algo}_exec_log.md"
  input_temp=`mktemp`
  echo "## ${contract}" >> "$out"
  cat <<EOF >> $input_temp

### Input
EOF
  local idata_file
  if [ -L $1.data.json ]; then
    idata_file=`readlink $1.data.json`
    if [ -r $idata_file ] && [ "$idata_file" != "/dev/null" ]; then
      idata="`basename $idata_file|cut -d. -f1`"
      input_found=1
      cat <<EOF >> $input_temp
$idata

<<< @/$contract.data.desc.json

EOF
    fi
  fi
  local ikeys_file
  if [ -L $1.keys.json ]; then
    ikeys_file=`readlink $1.keys.json`
    if [ -r $ikeys_file ] && [ "$ikeys_file" != "/dev/null" ]; then
      ikeys="`basename $ikeys_file|cut -d. -f1`"
      input_found=1
      cat <<EOF >> $input_temp
$ikeys

<<< @/$contract.keys.desc.json

EOF
    fi
  fi
  if [ $input_found == 1 ]; then cat $input_temp >> $out; fi
  rm -f $input_temp

  cat <<EOF >> $out
### Zencode
<<< @/${contract}.slang{gherkin}
![]($contract.svg)

### Output
<<< @/${contract}.out.desc.json

EOF
}

describe() {
  local base="${SRC}/$contract"
  target=$1
  [ "$target" == "" ] && {
    _err "describe invalide usage: target not specified (1st arg)"
    exit 1; }
  shift 1
  ztmp=`mktemp`
  touch $ztmp
  for i in $*; do
    cat <<EOF >> $ztmp
Given I have '$i'
EOF
  done
  for i in $*; do
    cat <<EOF >> $ztmp
Then print '$i' as 'description'
EOF
  done
  zenroom -z $ztmp -a "$base.$target.json" | jq . > $base.$target.desc.json
}

save_output() {
  filename="$1"
  [ "$output" == "" ] && {
    _err "Output is missing, no result from previous computation"
    exit 1
  }
  rm -f "${1}"
  echo "$output" > "${1}"
  >&3 echo " ðŸ’¾ > `basename $1`"
}

input() {
  [ -r "$2" ] || {
    _err "Input file not found: $2"
    exit 1
  }
  [ "$contract" == "" ] && {
    _err "Prepare error: contract unknown"
    exit 1
  }
  local ft="data"
  [ "$1" == "" ] || ft="$1"
  rm -f "${SRC}/${contract}.${ft}.json"
  ln -s "$2" "${SRC}/${contract}.${ft}.json"
  >&3 echo " ðŸ”Œ $ft `basename $2`"
}
