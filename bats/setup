# Copyright (C) 2025 Dyne.org Foundation
#
# Designed, written and maintained by Denis Roio <jaromil@dyne.org>
#
# This source code is free software; you can redistribute it and/or
# modify it under the terms of the GNU Public License as published by
# the Free Software Foundation; either version 3 of the License, or
# (at your option) any later version.
#
# This source code is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.	Please refer
# to the GNU Public License for more details.
#
# You should have received a copy of the GNU Public License along with
# this source code; if not, , see <https://www.gnu.org/licenses/>.

TMP="$BATS_TEST_TMPDIR"
T="$BATS_TEST_DIRNAME"
# root where slangroom starts searching for files
export FILES_DIR="$T"
export SRC="${T}/src"
mkdir -p "$SRC"
load bats/test_helper/bats_support/load
load bats/test_helper/bats_assert/load
load bats/test_helper/bats_file/load
function _out() {     printf "$*\n"; }
function _err() { >&2 printf "$*\n"; }
slexe() {
  set +e
  [ -r bin/slexfe ] || {
    _err "Error: bin/slexfe not found." | tee -a $TMP/err
    exit 1
  }
  command -v slangroom-exec > /dev/null || {
    _err "Error: slangroom-exec not found." | tee -a $TMP/err
    exit 1
  }
  [ -r "${1}.slang" ] || {
    _err "Error: script not found: $1" | tee -a $TMP/err
    exit 1
  }
  # run bats_pipe bash bin/slexfe -F $1 \| slangroom-exec
  >&3 echo " ðŸ”¥ `basename ${1}.slang`"
  local start_time_s=$(date +%s)
  local start_time_ns=$(date +%N)
  bash bin/slexfe -F $1 \
    | slangroom-exec \
        1>$TMP/out 2> >(tee $TMP/err | grep -v 'J64 ' >&2)
  local res=$?
  local end_time_s=$(date +%s)
  local end_time_ns=$(date +%N)
  export output=`cat $TMP/out`
  [ "$res" != 0 ] && {
    >&2 echo "TRACE:"
    awk '/J64 TRACE/ {print $3}' $TMP/err | \
      cut -d\" -f1 | base64 -d | jq .
    >&2 echo "HEAP:"
    awk '/J64 HEAP/ {print $3}' $TMP/err | \
      cut -d\" -f1 | base64 -d | jq .
    exit 1
  }
  [ "$output" == "" ] && {
    _err "Output is missing, no result from previous computation" | tee -a $TMP/err
    exit 1
  }
  # Avoid leading zero issues by normalizing inputs
  start_time_s=$((10#$start_time_s))
  start_time_ns=$((10#$start_time_ns))
  end_time_s=$((10#$end_time_s))
  end_time_ns=$((10#$end_time_ns))
  # Convert and calculate elapsed time in milliseconds
  local start_time_ms=$((start_time_s * 1000 + start_time_ns / 1000000))
  local end_time_ms=$((end_time_s * 1000 + end_time_ns / 1000000))
  local execution_time_ms=$((end_time_ms - start_time_ms))
  rm -f "${1}.out.json"
  echo "$output" > "${1}.out.json"
  >&3 echo " ðŸ’¾ `basename ${1}.out.json`"
  >&3 echo ""
  set -e
  if [ -L $1.data.json ]; then
    idata=`readlink $1.data.json`
    local size=$(stat --format="%s" "$idata") # Get file size in bytes
    idata="`basename $idata`\n\n$size bytes"
  else
    idata="null\n\n0 bytes"
  fi
  if [ -L $1.keys.json ]; then
    ikeys=`readlink $1.keys.json`
    local size=$(stat --format="%s" "$ikeys") # Get file size in bytes
    ikeys="`basename $ikeys`\n\n$size bytes"
  else
    ikeys="null\n\n0 bytes"
  fi
  # size_kilobytes=$(echo "scale=2; $size / 1024" | bc)
  iout="`basename $1`\n\n$(stat --format="%s" "$1.out.json") bytes"
cat <<EOF | dot -Tsvg -o ${1}.svg
digraph G {
    rankdir=LR;
    node [shape=box, style=rounded, fontname="Arial", fontsize=12, color=black, fillcolor=lightgray, margin=0.2];
    bgcolor=transparent;
    edge [arrowsize=0.8];
    Input1 [label="$idata"];
    Input2 [label="$ikeys"];
    Script [shape=ellipse, label="zencode_exec\n\ntime: $execution_time_ms ms"];
    Output [label="$iout"];
    Input1 -> Script;
    Input2 -> Script;
    Script -> Output;
    edge [color=black, arrowsize=0.7];
}
EOF
}

save_output() {
  filename="$1"
  [ "$output" == "" ] && {
    _err "Output is missing, no result from previous computation" | tee -a $TMP/err
    exit 1
  }
  rm -f "${1}"
  echo "$output" > "${1}"
  >&3 echo " ðŸ’¾ > `basename $1`"
}

input() {
  [ -r "$2" ] || {
    _err "Input file not found: $2" | tee -a $TMP/err
    exit 1
  }
  [ "$contract" == "" ] && {
    _err "Prepare error: contract unknown" | tee -a $TMP/err
    exit 1
  }
  local ft="data"
  [ "$1" == "" ] || ft="$1"
  rm -f "${SRC}/${contract}.${ft}.json"
  ln -s "$2" "${SRC}/${contract}.${ft}.json"
  >&3 echo " ðŸ”Œ $ft `basename $2`"
}
